#!/bin/bash

source koi
koiname=lurker
koidescription="Hacker News terminal client"

# internal variables
masterpostlist=()
apiurl='https://hacker-news.firebaseio.com/v0/topstories.json'
spinpid=
colors=1
foldsize=100

# TODO: parallelize thread fetch
# TODO: remove lurker.old

function __verifyjq {
	# verify jq is installed
	# shellcheck disable=SC2091
    if ! type jq > /dev/null 2>&1 ; then
        __errortext "$koiname: err: 'jq' is not in the PATH (see: https://stedolan.github.io/jq/)"
        __errortext "  lurker uses 'jq' to process Hacker News API responses, please install it before continuing"
        return 1
    fi
}

function __getmasterlist {
	# get master list of posts (500 total)
	mkdir -p "${HOME}/.lurker"
	masterpostlist="$(curl -s "$apiurl")"
	masterpostlist="${masterpostlist//[/}"
	masterpostlist="${masterpostlist//]/}"
	masterpostlist=( ${masterpostlist//,/ } )
}

function __drawlogo {
	echo '.____                  __                 '
	echo '|    |    __ _________|  | __ ___________ '
	echo '|    |   |  |  \_  __ \  |/ // __ \_  __ \'
	echo '|    |___|  |  /|  | \/    <\  ___/|  | \/'
	echo '|_______ \____/ |__|  |__|_ \\___  >__|   '
	echo '        \/                 \/    \/       '
}

function __startspin {
	# start the spinner
	# $1 message to display with the spinner
	local message X
	set +m
	message="$1"
	echo -ne "$message   "
	{ while : ; do for X in '┤' '┘' '┴' '└' '├' '┌' '┬' '┐' ; do echo -en "\b$X" ; sleep 0.1 ; done ; done & } 2>/dev/null
	spinpid=$!
}

function __stopspin {
	# stop the spinner
	{ kill -9 $spinpid && wait; } 2>/dev/null
	set -m
	echo -en "\033[2K\r"
}

function __exitcleanly {
	__stopspin
	# rm -rf "${HOME}/.lurker/"*
}

# ---------------- COLORS ---------------- #
function __gray {
	grey $@
}
function __grey {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[90m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __red {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[91m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __green {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[92m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __yellow {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[93m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __blue {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[94m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __pink {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[95m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __teal {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[96m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
function __white {
	if [[ $colors -eq 1 ]] ; then
		echo -ne "\033[97m$@\033[0m"
	else
		echo -ne "$@"
	fi
}
# ---------------- END COLORS ---------------- #

# ---------------- GET POSTS ---------------- #
function __getposts {
	# Handle spinner and call function to get posts
	# $1 is start index
	# $2 is end index
	# $3 is loading text (optional)

	# __startspin "${3:-"Fetching more posts..."}"
	__getmultipleposts "$1" "$2"
}

function __getmultipleposts {
	# get posts between startindex and endindex
	# $1 is startindex
	# $2 is endindex

	# env LC_CTYPE=C tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 32

	local i index data list num

	for i in $(seq "$1" "$2") ; do
		index=$(( i + 1 ))
		__getindividualpost "$index" > "${HOME}/.lurker/${index}" &
	done

	while : ; do
		num="$(find "${HOME}/.lurker/" -type f | wc -l)"
		if [[ $num -eq 10 ]] ; then
			break
		fi
	done

	# set -x
	echo 'before'
	for i in $(seq "$1" "$2") ; do
		index=$(( i + 1 ))
		echo "index: $index"
		echo "opening: ${HOME}/.lurker/${index}"
		cat ~/.lurker/${index}
	done
	echo 'after'
	# set +x

	# for i in $(seq "$1" "$2") ; do
	# 	index=$(( i + 1 ))
	# 	data="$(__getindividualpost "$index")"
	# 	list="${list}${data}\n"
	# done

	# __stopspin
	# echo -ne "\033[2K\033[E"
	# echo -ne "$list"
}

function __getindividualpost {
	# Get an individual post
	# $1 - numerical post ID
	local postid post title posttext descendants descendantstext author score time timetext url urltext metadataindent
	postid="$1"

	# get post data
	post="$(curl -s "https://hacker-news.firebaseio.com/v0/item/${masterpostlist[(( $postid - 1 ))]}.json?print=pretty")"
	title="$(jq -r '.title' <<< "$post")"
	posttext=
	if jq -r -e 'has("text")' <<< "$post" > /dev/null ; then
		posttext="$(jq -r '.text' <<< "$post")"
	fi

	# determine descendants (number of comments)
	descendants="$(jq -r '.descendants' <<< "$post")"
	if [[ "$descendants" == 'null' ]] ; then
		descendantstext="comments disabled"
	elif [[ "$descendants" -eq 1 ]] ; then
		descendantstext="$descendants comment"
	else
		descendantstext="$descendants comments"
	fi

	# determine post metadata
	author="$(jq -r '.by' <<< "$post")"
	score="$(jq -r '.score' <<< "$post")"
	time="$(jq -r '.time' <<< "$post")"
	time=$(( $(date +%s) - time ))
	timetext="$(__cleantime "$time")"
	url="$(jq -r '.url' <<< "$post")"
	if [[ "$url" == 'null' ]] ; then
		urltext=
	else
		urltext="($(awk -F[/:] '{print $4}' <<< "$url"))"
	fi

	# determine indent size for metadata
	if [[ $postid -lt 10 ]] ; then
		metadataindent='   '
	elif [[ $postid -lt 100 ]] ; then
		metadataindent='    '
	else
		metadataindent='     '
	fi

	# display info
	echo -ne "${postid}. "
	echo "$(__green $(__cleantext "$title")) $(__pink "$urltext")"
	echo "${metadataindent}$(__blue $(__cleantext "$score") points) $(__white by) $(__yellow $(__cleantext "$author")) $(__white $(__cleantext "$timetext") "|") $(__teal $(__cleantext "$descendantstext"))"
	if [[ "$posttext" != "" ]] ; then
		__white "$(__cleantext "$posttext" | fold -w "$foldsize" -s)\n"
	fi
}
# ---------------- END GET POSTS ---------------- #

# ---------------- GET THREAD ---------------- #
function __getthreadpost {
	# Handle spinner and call function to get posts
	# $1 is the post ID

	local postid post children title posttext descendants descendantstext author score time timetext url urltext
	postid="$1"

	# get post info
	post="$(curl -s "https://hacker-news.firebaseio.com/v0/item/${masterpostlist[(( $postid - 1 ))]}.json?print=pretty")"
	children=()
	if jq -r -e 'has("kids")' <<< "$post" > /dev/null; then
		children=( $(jq -r '.kids[]' <<< "$post") )
	fi
	title="$(jq -r '.title' <<< "$post")"
	posttext=
	if jq -r -e 'has("text")' <<< "$post" > /dev/null; then
		posttext="$(jq -r '.text' <<< "$post")"
	fi
	descendants="$(jq -r '.descendants' <<< "$post")"
	if [[ "$descendants" == 'null' ]] ; then
		descendantstext="comments disabled"
	elif [[ "$descendants" -eq 1 ]] ; then
		descendantstext="$descendants comment"
	else
		descendantstext="$descendants comments"
	fi

	# get post metadata
	author="$(jq -r '.by' <<< "$post")"
	score="$(jq -r '.score' <<< "$post")"
	time="$(jq -r '.time' <<< "$post")"
	time=$(( $(date +%s) - $time ))
	timetext="$(__cleantime "$time")"
	url="$(jq -r '.url' <<< "$post")"
	if [[ "$url" == 'null' ]] ; then
		urltext=
	else
		urltext="($(awk -F[/:] '{print $4}' <<< "$url"))"
	fi

	# display post header info
	echo "$(__green $(__cleantext "$title")) $(__pink "$urltext")"
	echo "$(__blue $(__cleantext "$score") points) $(__white by) $(__yellow $(__cleantext "$author")) $(__white $(__cleantext "$timetext") "|") $(__teal $(__cleantext "$descendantstext"))"
	if [[ "$posttext" != "" ]] ; then
		__white "$(__cleantext "$posttext" | fold -w "$foldsize" -s)\n"
	fi

	# start recursive comment tree traversal for thread
	if [[ "$descendants" != 'null' ]] ; then
		if [[ $descendants -gt 0 ]] ; then
			__startspin "Fetching $descendants comments...  "
			__startthreadfetch "${children[@]}"
		fi
	fi
}

function __startthreadfetch {
	# Intermediate function to handle recursion cleanly
	# $1+ is the list of children to traverse for __getthreadcoments

	# TODO: parallelize curls so it doesn't take so long to load thread

	local list

	list="$(__getthreadcoments 0 "$@")"
	echo -ne "\033[2K\033[E"
	echo -e "$list"
	__stopspin
}

function __getthreadcoments {
	# get comments for thread
	# $1 is the depth of our recursion
	# $2 is the list of children to traverse

	local depth child comment indent author commenttext time timetext deleted dead children
	depth="$1"
	shift

	for child in $@ ; do
		# get comment info
		comment="$(curl -s "https://hacker-news.firebaseio.com/v0/item/$child.json?print=pretty")"
		
		# calculate indent
		indent=
		for _ in $(seq 0 $depth) ; do
			indent="${indent}    "
		done

		# get comment information
		author="$(jq -r '.by' <<< "$comment")"
		commenttext="$(jq -r '.text' <<< "$comment")"
		time="$(jq -r '.time' <<< "$comment")"
		time=$(( $(date +%s) - $time ))
		timetext="$(__cleantime $time)"
		deleted="$(jq -r '.deleted' <<< "$comment")"
		dead="$(jq -r '.dead' <<< "$comment")"

		# skip if comment has been deleted
		if [[ "$deleted" == 'true' || "$dead" == 'true' ]] ; then
			continue
		fi

		# display comment information
		echo "${indent}$(__teal "$(__cleantext "$author")") $(__white "|") $(__teal "$timetext:")"
		__white "$(__cleantext "$commenttext" | fold -w "$foldsize" -s | sed "s/^/${indent}/")\n"

		# calculate children to continue traversal
		children=()
		if jq -r -e 'has("kids")' <<< "$comment" > /dev/null; then
			children=( $(jq -r '.kids[]' <<< "$comment") )
		fi
		if [[ ${#children[@]} -gt 0 ]] ; then
			__getthreadcoments $(( $depth + 1 )) "${children[@]}"
		fi
	done
}
# ---------------- END GET THREAD ---------------- #

# ---------------- MAIN LOOP ---------------- #
#  1. Display prompt, receive keyboard input
#  2. Parse input, handle command

function __lurk {
	local startindex endindex prompt key id disp
	startindex=0
	endindex=$(( startindex + 9 ))

	__getposts "$startindex" "$endindex" "Fetching posts..."
	prompt="\033[2K\033[E> "

	while : ; do
		echo -ne "$prompt"
		if [[ "$command" == "" ]] ; then
			IFS='' read key
		else
			key="$command"
			command=
		fi

		# if key is a number
		[ -n "$key" ] && [ "$key" -eq "$key" ] 2>/dev/null
		if [[ $? -eq 0 ]] ; then
			if [[ $key -lt 501  && $key -gt 0 ]] ; then
				__getindividualpost "$key"
			else
				__errortext -c "Post index must be between 1 and 500"
			fi
			continue
		fi

		# if key is a command
		key="$(tr '[:upper:]' '[:lower:]' <<< "$key")"
		case "$key" in
			read*)
				id="${key#read*}"
				[ -n "$id" ] && [ "$id" -eq "$id" ] 2>/dev/null
				if [[ $? -ne 0 ]] ; then
					__errortext -c "Post index must be a number"
					continue
				fi
				if [[ $id -lt 1 || $id -gt 500 ]] ; then
					__errortext -c "Post index must be between 1 and 500"
					continue
				fi
				__getthreadpost "$id"
				;;
			b|back|again)
				__getposts "$startindex" "$endindex" "Fetching posts again...  "
				;;
			m|more)
				startindex=$(( endindex + 1 ))
				endindex=$(( startindex + 9 ))
				__getposts "$startindex" "$endindex"
				;;
			l|less)
				if [[ "$startindex" -gt 9 ]] ; then
					endindex=$(( startindex - 1 ))
					startindex=$(( endindex - 9 ))
					__getposts "$startindex" "$endindex" "Fetching previous posts...  "
				else
					__errortext -c "Post index must be between 1 and 500"
				fi
				;;
			open*)
				id="${key#open*}"
				[ -n "$id" ] && [ "$id" -eq "$id" ] 2>/dev/null
				if [[ $? -ne 0 ]] ; then
					__errortext -c "Post index must be a number"
					continue
				fi
				if [[ $id -lt 0 || $id -gt 500 ]] ; then
					__errortext -c "Post index must be between 1 and 500"
					continue
				fi
				post="$(curl -s "https://hacker-news.firebaseio.com/v0/item/${masterpostlist[(( $id - 1 ))]}.json?print=pretty")"
				url="$(jq -r '.url' <<< "$post")"
				if [[ "$url" == 'null' ]] ; then
					__errortext -c "No URL specified for this post"
					continue
				fi
				if [[ "$(uname -s)" == *Darwin* ]] ; then
					open "$(sed -e 's/"//g' <<< "$url")"
				else
					__errortext -c "Sorry, this feature is only available on macOS. Here's the link you'd like to open:"
					sed -e 's/"//g' <<< "$url"
				fi
				;;
			hack*)
				id="${key#hack*}"
				[ -n "$id" ] && [ "$id" -eq "$id" ] 2>/dev/null
				if [[ $? -ne 0 ]] ; then
					__errortext -c "Post index must be a number"
					continue
				fi
				if [[ $id -lt 0 || $id -gt 500 ]] ; then
					__errortext -c "Post index must be between 1 and 500"
					continue
				fi
				url="https://news.ycombinator.com/item?id=${masterpostlist[(( $id - 1 ))]}"
				if [[ "$(uname -s)" == *Darwin* ]] ; then
					open "$(sed -e 's/"//g' <<< "$url")"
				else
					__errortext -c "Sorry, this feature is only available on macOS. Here's the link you'd like to open:"
					sed -e 's/"//g' <<< "$url"
				fi
				;;
			clear)
				clear
				;;
			h|help|list)
				echo "Available commands:"
				echo "  help        - show this help menu"
				echo "  read <ID>   - open the comment thread for post ID"
				echo "  open <ID>   - open the URL for the post ID in your default browser (only available on macOS)"
				echo "  hack <ID>   - open the Hacker News link for the post ID in your default browser (only available on macOS)"
				echo "  <ID>        - get info for post ID"
				echo "  more        - show the next 10 posts (up to 500)"
				echo "  less        - show the previous 10 posts"
				echo "  back        - show the previous list of posts again"
				echo "  clear       - clear the screen"
				echo "  exit        - quit lurker"
				;;
			q|e|quit|exit|done|'/exit'|'/quit'|'/q'|'exit()'|'quit()'|'done()'|'.exit'|'.quit'|'.done')
				echo
				exit 0
				;;
			'')
				continue
				;;
			*)
				key=( $key )
				disp="'${key[0]}'"
				__errortext -c "Unknown command $disp"
				__errortext -c "Type 'help' for command list"
				;;
		esac
	done
}
# ---------------- END MAIN LOOP ---------------- #

# ---------------- CLEAN DATA ---------------- #
function __cleantime {
	# clean time into a human readable format
	# $1 is the time elapsed in seconds

	local time timetext
	time="$1"

	if [[ "$time" -lt 60 ]] ; then
		if [[ "$time" -eq 1 ]] ; then
			time_text="$time second ago"
		else
			time_text="$time seconds ago"
		fi
	elif [[ "$time" -ge 60 && "$time" -lt 3600 ]] ; then
		time=$(( $time / 60 ))
		if [[ "$time" -eq 1 ]] ; then
			time_text="$time minute ago"
		else
			time_text="$time minutes ago"
		fi
	elif [[ "$time" -ge 3600 && "$time" -lt 86400 ]]; then
		time=$(( $time / 3600 ))
		if [[ "$time" -eq 1 ]] ; then
			time_text="$time hour ago"
		else
			time_text="$time hours ago"
		fi
	else
		time=$(( $time / 86400 ))
		if [[ "$time" -eq 1 ]] ; then
			time_text="$time day ago"
		else
			time_text="$time days ago"
		fi
	fi
	echo "$time_text"
}

function __cleantext {
	# clean text into terminal friendly format
	# $@ is the text to clean

	local content

	content="$(echo "$@" | sed \
	-e 's/&gt;/>/g' \
	-e "s/&#x27;/'/g" \
	-e 's/&quot;/"/g' \
	-e 's/\&amp;/\&/g' \
	-e 's/<i>/_/g' \
	-e 's;</i>;_;g' \
	-e 's/<b>/**/g' \
	-e 's;</b>;**;g' \
	-e 's/<strong>/**/g' \
	-e 's;</strong>;**;g' \
	-e 's~&#x2F;~/~g' \
	-e 's~<a .*\(href=\\"[^\\"]*\).*</a>~\1~g' \
	-e 's~href=\\"~~g' \
	-e 's~<a .*\(href="[^"]*\).*</a>~\1~g' \
	-e 's~href="~~g')"
	if [[ "$(uname -s)" == *Darwin* ]] ; then
		content="$(echo "$content" | sed \
		-e 's/<p>/\\\n\\\n/g' \
		-e 's/<br>/\\\n\\\n/g' \
		-e 's/<pre><code>/```\\\n/g' \
		-e 's;</code></pre>;\\\n```\\\n;g' \
		-e 's/<code>/```\\\n/g' \
		-e 's;</code>;\\\n```\\\n;g')"
	else
		content="$(echo "$content" | sed \
		-e 's/<p>/\n\n/g' \
		-e 's/<br>/\n\n/g' \
		-e 's/<pre><code>/```\n/g' \
		-e 's;</code></pre>;\n```\n;g' \
		-e 's/<code>/```\n/g' \
		-e 's;</code>;\n```\n;g')"
	fi
	echo -e "$content"
}
# ---------------- END CLEAN DATA ---------------- #

function __verifynumber {
	# verify that an argument is a number

	local returncode
	returncode=0

	set +e
	[ -n "$1" ] && [ "$1" -eq "$1" ] 2>/dev/null
	# shellcheck disable=SC2181
	if [[ $? -ne 0 ]] ; then
	    __errortext "$koiname: err: argument for '--foldsize' must be an integer"
	    returncode=1
	elif [[ "$1" -lt 80 ]] ; then
		__errortext "$koiname: err: minimum fold size is 80"
		returncode=1
	fi
	set -e
	return "$returncode"
}

function __koimain {
	__addarg "-h" "--help" "help" "optional" "" "$koidescription"
	__addarg "-n" "--nocolors" "flag" "optional" "" "Do not use colors in output"
	__addarg "-f" "--foldsize" "storevalue" "optional" "100" "The line length at which to wrap" "__verifynumber"
	__addarg "-c" "--command" "storevalue" "optional" "" "Run a lurker command when lurker starts"
	__addarg "-s" "--silent" "flag" "optional" "" "Do not print the lurker logo when lurker starts"
	__parseargs "$@"

	set +e

	if [[ $nocolors -eq 1 ]] ; then
		colors=0
	elif [[ "$(tput colors)" -eq 0 ]] ; then
		__errortext "$koiname: err: colors are not supported on this terminal"
		return 1
	fi

	foldsize="$foldsize"

	__verifyjq
	if [[ $silent -eq 0 ]] ; then
		__drawlogo
	fi
	__getmasterlist

	trap __exitcleanly EXIT

	__lurk
}

__koirun "$@"
